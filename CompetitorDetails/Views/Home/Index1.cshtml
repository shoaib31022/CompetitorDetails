@model List<ArticleViewModel>
@{
    ViewData["Title"] = "Home Page";
}

@* <div id="searchResults">
    <partial name="_ArticleDetail" />
</div> *@

<h3 class="text-center">Table of Articles</h3>
<div>
    <!-- Buttons for filtering -->
    <button class="filter-btn align-middle d-flex btn border-dark border-1" data-filter="today">Show Today Articles Posted</button>
    @* <button class="filter-btn" data-filter="week">This Week</button>
    <button class="filter-btn" data-filter="month">This Month</button> *@
</div>


<table id="articleTable" class="display">
    <thead>
        <tr>
            <th>Brand</th>
            <th>Title</th>
            <th>Time</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null)
        {
            @foreach (var article in Model)
            {
                await Html.RenderPartialAsync("_ArticleDetail", article);
            }
        }
        @* @* <partial name="_ArticleDetail" /> <!-- Render the PartialView --> *@
    </tbody>
</table>

@section scripts{

    <script>
        $(document).ready(function () {
            var table = $('#articleTable').DataTable({
                ajax: { url: "/home/GetArticleData", dataSrc: "" },
                columns: [
                    {
                        data: "brandName",
                    },
                    {
                        data: "articleTitle",
                        render: function (data, type, row, meta) {
                            // 'type' parameter helps you determine if DataTables is rendering for display or sorting etc.
                            // You might want to conditionally render differently based on the 'type',
                            // but for simplicity, let's assume we want the same behavior for all types.

                            // 'row' parameter provides access to the entire data object for the current row
                            // You can access other properties like 'articleUrl' from 'row'

                            // Construct the hyperlink using the articleUrl and articleTitle
                            return '<a href="' + row.articleUrl + '"target="_blank">' + data + '</a>';
                        }
                    },
                    {
                        data: "articleTime", render: function (data, type, row, meta) {
                            // Convert the articleTime to a Date object
                            var articleDate = new Date(data);

                            // Get the current date
                            var currentDate = new Date();

                            // Calculate the difference in days
                            var differenceInTime = currentDate.getTime() - articleDate.getTime();
                            var differenceInDays = Math.floor(differenceInTime / (1000 * 3600 * 24));

                            // Return the appropriate label based on the difference in days
                            if (differenceInDays === 0) {
                                return "Today";
                            } else if (differenceInDays === 1) {
                                return "1 day ago";
                            } else {
                                return differenceInDays + " days ago";
                            }
                        }
                    }
                ],
                columnDefs: [{ width: '15%', targets: 0 }, { width: '10%', targets: 2 }]
            });

            // Declare the 'table' variable outside the click event handler
            var table;

            $('.filter-btn').on('click', function () {
                // Initialize 'table' variable if not already initialized
                if (!table) {
                    table = $('#articleTable').DataTable();
                }

                var filterValue = $(this).data('filter');
                if (filterValue === "today") {
                    // Filter by today's date
                    table.column(2).search('Today').draw();
                }
                else if (filterValue === "week") {
                    // Filter by articles published within the last 7 days
                    table.column(1).search('1day ago').draw();
                }
                else if (filterValue === "month") {
                    // Filter by articles published within the last month
                    // You need to define the logic for this filter based on your specific requirements
                }
            });


        });
    </script>
}